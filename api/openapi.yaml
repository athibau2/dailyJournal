openapi: 3.0.3
info:
  title: Daily Journal
  version: v1.0
paths:
  /accounts:
    x-controller: accounts
    post:
      x-operation: createAccount
      tags:
        - Accounts
      summary: Create an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstname
                - lastname
                - email
                - password
              properties:
                firstname:
                  type: string
                lastname: 
                  type: string
                email:
                  type: string
                password:
                  type: string
                  format: password
            example:
              firstname: Andrew
              lastname: Thibaudeau
              email: example@email.com
              password: password
      responses:
        201:
          description: Account created
        400:
          description: Account already exists
  /accounts/{userid}:
    x-controller: accounts
    parameters:
      - $ref: '#/components/parameters/Pathuserid'
    delete: 
      x-operation: deleteAccount
      tags:
        - Accounts
      summary: Delete an account
      responses:
        204: 
          description: Account deleted
        404:
          description: Account not found
  /accounts/{userid}/login:
    x-controller: accounts
    parameters:
      - $ref: '#/components/parameters/Pathuserid'
    put:
      x-operation: login
      tags:
        - Accounts
      summary: Login to an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
            example:
              password: a-password
      responses:
        200:
          description: Account logged in
        400:
          description: Login failed
        401:
          description: Password required
        403:
          description: Email and password do not match
        404:
          description: Account does not exist
  /accounts/{userid}/logout:
    x-controller: accounts
    parameters:
        - $ref: '#/components/parameters/Pathuserid'
    put:
      x-operation: logout
      tags:
        - Accounts
      summary: Logout of an account
      responses:
        200:
          description: Account logged out
        400:
          description: Logout failed
  /accounts/{userid}/settings:
    x-controller: accounts
    parameters:
      - $ref: '#/components/parameters/Pathuserid'
    put:
      x-operation: updatePassword
      tags:
        - Accounts
      summary: Update user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
            example:
              password: new-password
      responses:
        200:
          description: Password updated
  /entries:
    x-controller: entries
    post:
      x-operation: submitEntry
      tags:
        - Entries
      summary: Submit an entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - promptid
                - entryid
                - text
                - date
              properties:
                promptid:
                  type: string
                  readOnly: true
                entryid:
                  type: string
                  readOnly: true
                text:
                  type: string
                date:
                  type: string
                  format: date-time
      responses:
        201:
          description: Entry submitted
        400:
          description: Submission failed, response text required
    get:
      x-operation: getEntries
      tags: 
        - Entries
      summary: Get entries
      parameters:
        - name: topic
          in: query
          schema:
            type: string
        - name: week
          in: query
          schema:
            type: string
            format: date-time
        - name: month
          in: query
          schema:
            type: string
            format: date-time
        - name: year
          in: query
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entries'
  /entries/{entryid}:
    x-controller: entries
    parameters:
      - $ref: '#/components/parameters/Pathentryid'
    put:
      x-operation: updateEntry
      tags:
        - Entries
      summary: Update an entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
      responses:
        200:
          description: Entry updated
        404: 
          description: Entry not found
        400:
          description: Update failed
    delete:
      x-operation: deleteEntry
      tags:
        - Entries
      summary: Delete an entry
      responses:
        204:
          description: Entry deleted
        404:
          description: Entry not found
components:
  parameters:
    Pathuserid:
      name: userid
      in: path
      required: true
      schema:
        type: string
    Pathentryid:
      name: entryid
      in: path
      required: true
      schema:
        type: string
  # securitySchemes:
  #   cookieAuth:
  #     type: apiKey
  #     in: cookie
  #     name: journalSessionId
  schemas:
    MakeEntry:
      type: object
      properties:
        promptid:
            type: string
            readOnly: true
        entryid:
          type: string
          readOnly: true
        text:
          type: string
        date:
          type: string
          format: date-time
    GetEntry:
      type: object
      properties:
        promptid:
          type: string
          readOnly: true
        prompttext:
          type: string
          readOnly: true
        topic:
          type: string
          readOnly: true
        entryid:
          type: string
          readOnly: true
        text:
          type: string
        date:
          type: string
          format: date-time
    Entries:
      type: array
      items:
        $ref: '#/components/schemas/GetEntry'
          
